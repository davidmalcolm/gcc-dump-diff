#!/usr/bin/env python
import difflib
from pprint import pprint
import re
import sys

class Dump:
    def __init__(self, path):
        self.path = path
        self.lines = []
        self._decls_by_type = {}
        self._all_decls = {}
        self._seen_all_decls = False
        with open(path) as f:
            for line in f:
                self._on_line(line)

    def _on_line(self, line):
        print('OLD LINE: %s' % repr(line))

        if line == 'entry:\n':
            self._seen_all_decls = True
        else:
            if self._seen_all_decls:
                # Look for uses of decls
                for m in list(re.finditer('\s*(\S*)_([0-9]+)', line)):
                    print('MATCH: %s' % (m.groups(),))
                    prefix = m.group(1)
                    num = int(m.group(2))
                    if prefix not in self._all_decls:
                        self._all_decls[prefix] = {}
                    if num not in self._all_decls[prefix]:
                        # Renumber in order of appearance, starting at 0:
                        self._all_decls[prefix][num] = len(self._all_decls[prefix])
                    line = line.replace('%s_%i' % (prefix, num),
                                        '%s_%i' % (prefix, self._all_decls[prefix][num]))
                    print('NEW LINE: %s' % repr(line))
            else:
                m = re.match('^\s*(.*?)\s*(\S*)_([0-9]+);$', line)
                if m:
                    print('MATCH: %s' % (m.groups(),))
                    type_, prefix, num = m.groups()
                    num = int(num)
                    if type_ not in self._decls_by_type:
                        self._decls_by_type[type_] = {}
                    if prefix not in self._decls_by_type[type_]:
                        self._decls_by_type[type_][prefix] = {}
                    newnum = len(self._decls_by_type[type_][prefix])
                    self._decls_by_type[type_][prefix][num] = newnum
                    if prefix not in self._all_decls:
                        self._all_decls[prefix] = {}
                    self._all_decls[prefix][num] = newnum
                    line = line.replace('%s_%i' % (prefix, num),
                                        '%s_%i' % (prefix, self._all_decls[prefix][num]))
        self.lines.append(line)

def load_dump(path):
    d = Dump(path)
    pprint(d._decls_by_type)
    pprint(d._all_decls)
    return d

def main(argv):
    print(argv)
    dumpA = load_dump(sys.argv[1])
    dumpB = load_dump(sys.argv[2])
    for line in difflib.unified_diff(dumpA.lines,
                                     dumpB.lines,
                                     dumpA.path,
                                     dumpB.path):
        sys.stdout.write(line)

if __name__ == '__main__':
   main(sys.argv)
