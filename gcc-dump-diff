#!/usr/bin/env python
import difflib
from pprint import pprint
import re
import sys

class Dump:
    def __init__(self, path):
        self.verbose = 1
        self.path = path
        self.lines = []
        self._labels = set()
        self._decls_by_type = {}
        self._all_decls = {}
        with open(path) as f:
            for line in f:
                self.lines.append(line)
        self._find_labels()
        self._find_decls()
        self._remap_decls()

    def _find_labels(self):
        for line in self.lines:
            m = re.match('^(\S+):$', line)
            if m:
                if self.verbose:
                    print('LABEL: %s' % m.group(1))
                self._labels.add(m.group(1))
        if self.verbose:
            pprint(self._labels)

    def _find_decls(self):
        for line in self.lines:
            m = re.match('^\s*(.*?)\s*(\S*)_([0-9]+);$', line)
            if m:
                if self.verbose:
                    print('DECL: %s' % (m.groups(),))
                type_, prefix, num = m.groups()
                num = int(num)
                old_decl = '%s_%i' % (prefix, num)
                if old_decl in self._labels:
                    continue
                if type_ not in self._decls_by_type:
                    self._decls_by_type[type_] = {}
                if prefix not in self._decls_by_type[type_]:
                    self._decls_by_type[type_][prefix] = {}
                newnum = len(self._decls_by_type[type_][prefix])
                self._decls_by_type[type_][prefix][num] = newnum
                if prefix not in self._all_decls:
                    self._all_decls[prefix] = {}
                self._all_decls[prefix][num] = newnum

    def _remap_decls(self):
        for i, line in enumerate(self.lines):
            if self.verbose:
                print('OLD LINE: %s' % repr(line))

            # Look for uses of decls
            for m in list(re.finditer('\s*([_A-Za-z0-9]*)_([0-9]+)', line)):
                if self.verbose:
                    print('MATCH: %s' % (m.groups(),))
                prefix = m.group(1)
                num = int(m.group(2))
                old_decl = '%s_%i' % (prefix, num)
                if old_decl in self._labels:
                    if self.verbose:
                        print('skipping label: %s' % old_decl)
                    continue
                if prefix not in self._all_decls:
                    self._all_decls[prefix] = {}
                if num not in self._all_decls[prefix]:
                    # Renumber in order of appearance, starting at 0:
                    self._all_decls[prefix][num] = len(self._all_decls[prefix])
                newnum = self._all_decls[prefix][num]
                line = line.replace(old_decl,
                                    '%s_%i' % (prefix, newnum))
                if self.verbose:
                    print('NEW LINE: %s' % repr(line))

            self.lines[i] = line

def load_dump(path):
    d = Dump(path)
    pprint(d._decls_by_type)
    pprint(d._all_decls)
    return d

def main(argv):
    print(argv)
    dumpA = load_dump(sys.argv[1])
    dumpB = load_dump(sys.argv[2])
    for line in difflib.unified_diff(dumpA.lines,
                                     dumpB.lines,
                                     dumpA.path,
                                     dumpB.path):
        sys.stdout.write(line)

if __name__ == '__main__':
   main(sys.argv)
